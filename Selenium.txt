	PAGE OBJECT – это шаблон проектирования, который широко используется в 
 автоматизированном тестировании и позволяет разделять логику выполнения 
 тестов от их реализации. 
	Page Object как бы моделирует страницы тестируемого 
 приложения в качестве объектов в коде. В результате его использования у вас 
 получатся отдельные классы, отвечающие за работу с HTML каждой конкретной 
 веб-страницы. Такой подход значительно уменьшает объем повторяющегося кода, 
 потому что одни и те же объекты страниц можно использовать в различных тестах. 
 Основное преимущество Page Object заключается в том, что в случае изменения 
 пользовательского интерфейса, можно выполнить исправление только в одном месте, 
 а не исправлять каждый тест, в котором этот интерфейс используется.
	Класс PageObject не обязательно должен представлять собой всю страницу. 
Он может быть частью страницы, которая часто используется на сайте 
(или даже на одной странице). Это может быть, например, пагинатор или меню. 
	Основной принцип состоит в том, что есть только один класс в Вашем проекте, 
который знает о структуре HTML конкретной страницы или ее части.
	Паттерн Page Object в Selenium реализован с помощью библиотеки PageFactory 
и класса страницы. Page Object представляет собой отдельный класс, содержащий 
локаторы элементов, методы для работы с ними и конструктор принимающий в качестве 
параметра объект WebDriver. Методы класса Page Object могут возвращать объекты других 
Page Object классов. С помощью этого можно воссоздать копию переходов и поведения 
веб-приложения. Например, метод успешной регистрации в классе RegistrationPage должен 
возвращать экземпляр HomePage, потому что после регистрации на сайте пользователя 
перенаправляет на домашнюю страницу. Одним из следствий такого подхода является то, 
что необходимо моделировать как успешные, так и неуспешные методы. Или, например, 
в случае если нажатие на элемент может открывать различные страницы в зависимости 
от условий, то также необходимо создавать разные методы для каждого необходимого случая.

@FindBy в качестве параметров принимает те же механизмы поиска, что и методы класса By.
Аннотация @FindBy работает только с использованием PageFactory. 
Без вызова PageFactory.initElements(driver, this); при обращении к элементам 
Вы получите NullPointerException. PageFactory инициализирует элементы при помощи 
вызова поиска driver.findElement. Инициализация веб-элементов происходит на странице
 не вовремя вызова методаinitElements, PageFactory использует, так называемую, 
 LAZY инициализацию. То есть, поиск элемента будет осуществляться только при 
 обращении к нему в ходе выполнения теста. Если вы никогда не используете 
 элемент в PageObject, то findElement для него никогда не будет вызван. 
 Так объявленный в классе несуществующий на странице элемент вызовет исключение 
 только при попытке его использовать.
 
 